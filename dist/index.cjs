"use strict";const e=e=>"function"==typeof e,t=(t,r="")=>{if(!e(t))throw new TypeError(`${r} Expecting function arg`.trim())},r=t=>e(t.subscribe),n=(r,n=null)=>{const s=t=>e(n?.persist)&&n.persist(t);let i=(()=>{const e=new Map,t=t=>(e.has(t)||e.set(t,new Set),e.get(t)),r=(e,r)=>{if("function"!=typeof r)throw new TypeError("Expecting callback function as second argument");return t(e).add(r),()=>t(e).delete(r)};return{publish:(e,r)=>{t(e).forEach((e=>e(r)))},subscribe:r,subscribeOnce:(e,t)=>{const n=r(e,(e=>{t(e),n()}));return n},unsubscribeAll:t=>e.delete(t)}})(),u=r;s(u);const c=()=>u,o=e=>{u!==e&&(u=e,s(u),i.publish("change",u))};return{set:o,get:c,update:e=>{t(e,"[update]"),o(e(c()))},subscribe:e=>(t(e,"[subscribe]"),e(u),i.subscribe("change",e))}};exports.createSwitchStore=(s,i=null,u=null)=>{const c=e=>null==e?null:!!e,o=n({value:c(s),data:i},u),l=((s,i,u=null)=>{const c=t=>e(u?.persist)&&u.persist(t),o=n(u?.initialValue),l=[];if(s.forEach((e=>{if(!r(e))throw new TypeError("Expecting array of StoreLike objects");e.subscribe((e=>l.push(e)))()})),!e(i))throw new TypeError("Expecting second argument to be the derivative function");if(!i.length||i.length>2)throw new TypeError("Expecting the derivative function to have exactly 1 or 2 arguments");let a=0,b=[];return{get:o.get,subscribe:e=>{t(e,"[derived.subscribe]"),a++||s.forEach(((e,t)=>{b.push(e.subscribe((e=>{l[t]=e,1===i.length?(o.set(i(l)),c(o.get())):i(l,(e=>{o.set(e),c(o.get())}))})))}));const r=o.subscribe(e);return()=>{--a||(b.forEach((e=>e())),b=[]),r()}}}})([o],(([e])=>{const t=!0===e.value,r=null===e.value,n=!t;return{data:e.data,isOn:t,isOff:n,isUndefined:r,isOpen:t,isClosed:n}})),a=(e,t)=>{let r=o.get();void 0!==t&&(r={...r,data:t}),o.set({...r,value:c(e)})},b=e=>e.length>1?e[1]:e[0]&&(e[0]instanceof Event||["target","bubbles","cancelable","isTrusted"].every((t=>t in e[0])))?null:e[0],g=(...e)=>a(!0,b(e)),p=(...e)=>a(!1,b(e)),f=(...e)=>a(void 0,b(e));return{subscribe:l.subscribe,get:l.get,on:g,off:p,unset:f,toggle:()=>o.update((e=>({...e,value:c(!e.value)}))),toggleUnset:()=>o.get().value?f():g(),open:g,close:p}};
