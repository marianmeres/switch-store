!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self)["switch-store"]={})}(this,(function(e){"use strict";const t=e=>"function"==typeof e,n=(e,n="")=>{if(!t(e))throw new TypeError(`${n} Expecting function arg`.trim())},s=e=>t(e.subscribe),r=(e,s=null)=>{const r=e=>t(s?.persist)&&s.persist(e);let i=(()=>{const e=new Map,t=t=>(e.has(t)||e.set(t,new Set),e.get(t)),n=(e,n)=>{if("function"!=typeof n)throw new TypeError("Expecting callback function as second argument");return t(e).add(n),()=>t(e).delete(n)};return{publish:(e,n)=>{t(e).forEach((e=>e(n)))},subscribe:n,subscribeOnce:(e,t)=>{const s=n(e,(e=>{t(e),s()}));return s},unsubscribeAll:t=>e.delete(t)}})(),o=e;r(o);const u=()=>o,c=e=>{o!==e&&(o=e,r(o),i.publish("change",o))};return{set:c,get:u,update:e=>{n(e,"[update]"),c(e(u()))},subscribe:e=>(n(e,"[subscribe]"),e(o),i.subscribe("change",e))}};e.createSwitchStore=(e,i=null,o=null)=>{const u=e=>null==e?null:!!e,c=r({value:u(e),data:i},o),l=((e,i,o=null)=>{const u=e=>t(o?.persist)&&o.persist(e),c=r(o?.initialValue),l=[];if(e.forEach((e=>{if(!s(e))throw new TypeError("Expecting array of StoreLike objects");e.subscribe((e=>l.push(e)))()})),!t(i))throw new TypeError("Expecting second argument to be the derivative function");if(!i.length||i.length>2)throw new TypeError("Expecting the derivative function to have exactly 1 or 2 arguments");let a=0,b=[];return{get:c.get,subscribe:t=>{n(t,"[derived.subscribe]"),a++||e.forEach(((e,t)=>{b.push(e.subscribe((e=>{l[t]=e,1===i.length?(c.set(i(l)),u(c.get())):i(l,(e=>{c.set(e),u(c.get())}))})))}));const s=c.subscribe(t);return()=>{--a||(b.forEach((e=>e())),b=[]),s()}}}})([c],(([e])=>{const t=!0===e.value,n=null===e.value,s=!t;return{data:e.data,isOn:t,isOff:s,isUndefined:n,isOpen:t,isClosed:s}})),a=(e,t)=>{let n=c.get();void 0!==t&&(n={...n,data:t}),c.set({...n,value:u(e)})},b=(...e)=>e[e.length>1?1:0],f=(...e)=>a(!0,b(...e)),p=(...e)=>a(!1,b(...e)),d=(...e)=>a(void 0,b(...e));return{subscribe:l.subscribe,get:l.get,on:f,off:p,unset:d,toggle:()=>c.update((e=>({...e,value:u(!e.value)}))),toggleUnset:()=>c.get().value?d():f(),open:f,close:p}}}));
