!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self)["boolean-store"]={})}(this,(function(e){"use strict";const t=e=>"function"==typeof e,n=(e,n="")=>{if(!t(e))throw new TypeError(`${n} Expecting function arg`.trim())};e.createSwitchStore=(e=!1,s=null)=>{const o=e=>({isOn:!!e,isOpen:!!e,isOff:!e,isClosed:!e}),i=((e,s=null)=>{const o=e=>t(s?.persist)&&s.persist(e);let i=(()=>{const e=new Map,t=t=>(e.has(t)||e.set(t,new Set),e.get(t)),n=(e,n)=>{if("function"!=typeof n)throw new TypeError("Expecting callback function as second argument");return t(e).add(n),()=>t(e).delete(n)};return{publish:(e,n={})=>{t(e).forEach((e=>e(n)))},subscribe:n,subscribeOnce:(e,t)=>{const s=n(e,(e=>{t(e),s()}));return s},unsubscribeAll:t=>e.delete(t)}})(),r=e;o(r);const c=()=>r,u=e=>{r!==e&&(r=e,o(r),i.publish("change",r))};return{set:u,get:c,update:e=>{n(e,"[update]"),u(e(c()))},subscribe:e=>(n(e,"[subscribe]"),e(r),i.subscribe("change",e))}})({...o(e),data:s}),r=(e,t)=>{let n=i.get();void 0!==t&&(n={...n,data:t}),i.set({...n,...o(!!e)})},c=(e=void 0)=>r(!0,e),u=(e=void 0)=>r(!1,e);return{subscribe:i.subscribe,get:i.get,on:c,off:u,toggle:()=>i.update((e=>({...e,...o(!e.isOn)}))),open:c,close:u}}}));
