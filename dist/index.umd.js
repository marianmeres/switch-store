!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self)["switch-store"]={})}(this,(function(e){"use strict";const t=e=>"function"==typeof e,s=(e,s="")=>{if(!t(e))throw new TypeError(`${s} Expecting function arg`.trim())};e.createSwitchStore=(e=!1,n=null)=>{const i=e=>({isOn:e,isOpen:e,isOff:!e,isClosed:!e}),o=((e,n=null)=>{const i=e=>t(n?.persist)&&n.persist(e);let o=(()=>{const e=new Map,t=t=>(e.has(t)||e.set(t,new Set),e.get(t)),s=(e,s)=>{if("function"!=typeof s)throw new TypeError("Expecting callback function as second argument");return t(e).add(s),()=>t(e).delete(s)};return{publish:(e,s)=>{t(e).forEach((e=>e(s)))},subscribe:s,subscribeOnce:(e,t)=>{const n=s(e,(e=>{t(e),n()}));return n},unsubscribeAll:t=>e.delete(t)}})(),r=e;i(r);const c=()=>r,u=e=>{r!==e&&(r=e,i(r),o.publish("change",r))};return{set:u,get:c,update:e=>{s(e,"[update]"),u(e(c()))},subscribe:e=>(s(e,"[subscribe]"),e(r),o.subscribe("change",e))}})({...i(!!e),data:n}),r=(e,t)=>{let s=o.get();void 0!==t&&(s={...s,data:t}),o.set({...s,...i(!!e)})},c=(e=void 0)=>r(!0,e),u=(e=void 0)=>r(!1,e);return{subscribe:o.subscribe,get:o.get,on:c,off:u,toggle:()=>o.update((e=>({...e,...i(!e.isOn)}))),open:c,close:u}}}));
