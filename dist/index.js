const e=e=>"function"==typeof e,t=(t,n="")=>{if(!e(t))throw new TypeError(`${n} Expecting function arg`.trim())},n=(n=!1,s=null)=>{const r=e=>({isOn:!!e,isOpen:!!e}),o=((n,s=null)=>{const r=t=>e(s?.persist)&&s.persist(t);let o=(()=>{const e=new Map,t=t=>(e.has(t)||e.set(t,new Set),e.get(t)),n=(e,n)=>{if("function"!=typeof n)throw new TypeError("Expecting callback function as second argument");return t(e).add(n),()=>t(e).delete(n)};return{publish:(e,n={})=>{t(e).forEach((e=>e(n)))},subscribe:n,subscribeOnce:(e,t)=>{const s=n(e,(e=>{t(e),s()}));return s},unsubscribeAll:t=>e.delete(t)}})(),c=n;r(c);const i=()=>c,u=e=>{c!==e&&(c=e,r(c),o.publish("change",c))};return{set:u,get:i,update:e=>{t(e,"[update]"),u(e(i()))},subscribe:e=>(t(e,"[subscribe]"),e(c),o.subscribe("change",e))}})({...r(n),payload:s}),c=(e,t)=>{let n=o.get();void 0!==t&&(n={...n,payload:t}),o.set({...n,...r(!!e)})},i=(e=void 0)=>c(!0,e),u=(e=void 0)=>c(!1,e);return{subscribe:o.subscribe,get:o.get,on:i,off:u,toggle:()=>o.update((e=>({...e,...r(!e.isOn)}))),open:i,close:u}};export{n as createBooleanStore};
