const e=e=>"function"==typeof e,t=(t,s="")=>{if(!e(t))throw new TypeError(`${s} Expecting function arg`.trim())},s=(s=!1,n=null)=>{const r=e=>({isOn:e,isOpen:e,isOff:!e,isClosed:!e}),i=((s,n=null)=>{const r=t=>e(n?.persist)&&n.persist(t);let i=(()=>{const e=new Map,t=t=>(e.has(t)||e.set(t,new Set),e.get(t)),s=(e,s)=>{if("function"!=typeof s)throw new TypeError("Expecting callback function as second argument");return t(e).add(s),()=>t(e).delete(s)};return{publish:(e,s={})=>{t(e).forEach((e=>e(s)))},subscribe:s,subscribeOnce:(e,t)=>{const n=s(e,(e=>{t(e),n()}));return n},unsubscribeAll:t=>e.delete(t)}})(),c=s;r(c);const o=()=>c,u=e=>{c!==e&&(c=e,r(c),i.publish("change",c))};return{set:u,get:o,update:e=>{t(e,"[update]"),u(e(o()))},subscribe:e=>(t(e,"[subscribe]"),e(c),i.subscribe("change",e))}})({...r(!!s),data:n}),c=(e,t)=>{let s=i.get();void 0!==t&&(s={...s,data:t}),i.set({...s,...r(!!e)})},o=(e=void 0)=>c(!0,e),u=(e=void 0)=>c(!1,e);return{subscribe:i.subscribe,get:i.get,on:o,off:u,toggle:()=>i.update((e=>({...e,...r(!e.isOn)}))),open:o,close:u}};export{s as createSwitchStore};
