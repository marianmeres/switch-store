const e=e=>"function"==typeof e,t=(t,n="")=>{if(!e(t))throw new TypeError(`${n} Expecting function arg`.trim())},n=(n,s=null)=>{const r=e=>{const t=!0===e,n=!t;return{isOn:t,isOff:n,isUndefined:void 0===e,isOpen:t,isClosed:n}},i=((n,s=null)=>{const r=t=>e(s?.persist)&&s.persist(t);let i=(()=>{const e=new Map,t=t=>(e.has(t)||e.set(t,new Set),e.get(t)),n=(e,n)=>{if("function"!=typeof n)throw new TypeError("Expecting callback function as second argument");return t(e).add(n),()=>t(e).delete(n)};return{publish:(e,n)=>{t(e).forEach((e=>e(n)))},subscribe:n,subscribeOnce:(e,t)=>{const s=n(e,(e=>{t(e),s()}));return s},unsubscribeAll:t=>e.delete(t)}})(),o=n;r(o);const c=()=>o,u=e=>{o!==e&&(o=e,r(o),i.publish("change",o))};return{set:u,get:c,update:e=>{t(e,"[update]"),u(e(c()))},subscribe:e=>(t(e,"[subscribe]"),e(o),i.subscribe("change",e))}})({...r(n),data:s}),o=(e,t)=>{let n=i.get();void 0!==t&&(n={...n,data:t}),i.set({...n,...r(e)})},c=(...e)=>e[e.length>1?1:0],u=(...e)=>o(!0,c(...e)),b=(...e)=>o(!1,c(...e)),l=(...e)=>o(void 0,c(...e));return{subscribe:i.subscribe,get:i.get,on:u,off:b,unset:l,toggle:()=>i.update((e=>({...e,...r(!e.isOn)}))),toggleUnset:()=>i.get().isOn?l():u(),open:u,close:b}};export{n as createSwitchStore};
